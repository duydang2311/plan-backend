// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApp.Infrastructure.Persistence;

#nullable disable

namespace WebApp.Host.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Casbin.Persist.Adapter.EFCore.Entities.EFCorePersistPolicy<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("ptype");

                    b.Property<string>("Value1")
                        .HasColumnType("text")
                        .HasColumnName("v0");

                    b.Property<string>("Value2")
                        .HasColumnType("text")
                        .HasColumnName("v1");

                    b.Property<string>("Value3")
                        .HasColumnType("text")
                        .HasColumnName("v2");

                    b.Property<string>("Value4")
                        .HasColumnType("text")
                        .HasColumnName("v3");

                    b.Property<string>("Value5")
                        .HasColumnType("text")
                        .HasColumnName("v4");

                    b.Property<string>("Value6")
                        .HasColumnType("text")
                        .HasColumnName("v5");

                    b.HasKey("Id")
                        .HasName("pk_policies");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_policies_ptype");

                    b.HasIndex("Value1")
                        .HasDatabaseName("ix_policies_v0");

                    b.HasIndex("Value2")
                        .HasDatabaseName("ix_policies_v1");

                    b.HasIndex("Value3")
                        .HasDatabaseName("ix_policies_v2");

                    b.HasIndex("Value4")
                        .HasDatabaseName("ix_policies_v3");

                    b.HasIndex("Value5")
                        .HasDatabaseName("ix_policies_v4");

                    b.HasIndex("Value6")
                        .HasDatabaseName("ix_policies_v5");

                    b.ToTable("policies", (string)null);
                });

            modelBuilder.Entity("WebApp.Common.Models.JobRecord", b =>
                {
                    b.Property<Guid>("TrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("tracking_id");

                    b.Property<string>("CommandJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("command_json");

                    b.Property<DateTime>("ExecuteAfter")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("execute_after");

                    b.Property<DateTime>("ExpireOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expire_on");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_complete");

                    b.Property<string>("QueueID")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("queue_id");

                    b.HasKey("TrackingID")
                        .HasName("pk_job_records");

                    b.ToTable("job_records", (string)null);
                });

            modelBuilder.Entity("WebApp.Common.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("identifier")
                        .UseCollation("case_insensitive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_time")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.HasKey("Id")
                        .HasName("pk_teams");

                    b.HasIndex("WorkspaceId", "Identifier")
                        .IsUnique()
                        .HasDatabaseName("ix_teams_workspace_id_identifier");

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("WebApp.Common.Models.TeamMember", b =>
                {
                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid")
                        .HasColumnName("member_id");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_time")
                        .HasDefaultValueSql("now()");

                    b.HasKey("TeamId", "MemberId")
                        .HasName("pk_team_members");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("ix_team_members_member_id");

                    b.ToTable("team_members", (string)null);
                });

            modelBuilder.Entity("WebApp.Common.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("email");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_verified");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("salt");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_time")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("WebApp.Common.Models.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("token");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_time")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Token")
                        .HasName("pk_user_refresh_tokens");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_refresh_tokens_user_id");

                    b.ToTable("user_refresh_tokens", (string)null);
                });

            modelBuilder.Entity("WebApp.Common.Models.UserVerificationToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("token");

                    b.HasKey("UserId", "Token")
                        .HasName("pk_user_verification_tokens");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_verification_tokens_user_id");

                    b.ToTable("user_verification_tokens", (string)null);
                });

            modelBuilder.Entity("WebApp.Common.Models.Workspace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("path")
                        .UseCollation("case_insensitive");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_time")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_workspaces");

                    b.HasIndex("Path")
                        .IsUnique()
                        .HasDatabaseName("ix_workspaces_path");

                    b.ToTable("workspaces", (string)null);
                });

            modelBuilder.Entity("WebApp.Common.Models.Team", b =>
                {
                    b.HasOne("WebApp.Common.Models.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teams_workspaces_workspace_id");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("WebApp.Common.Models.TeamMember", b =>
                {
                    b.HasOne("WebApp.Common.Models.User", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_members_users_member_id");

                    b.HasOne("WebApp.Common.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_members_teams_team_id");

                    b.Navigation("Member");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WebApp.Common.Models.UserRefreshToken", b =>
                {
                    b.HasOne("WebApp.Common.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_refresh_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Common.Models.UserVerificationToken", b =>
                {
                    b.HasOne("WebApp.Common.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("WebApp.Common.Models.UserVerificationToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_verification_tokens_users_user_id");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
