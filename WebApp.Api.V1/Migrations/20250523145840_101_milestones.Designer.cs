// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApp.Infrastructure.Persistence;

#nullable disable

namespace WebApp.Host.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250523145840_101_milestones")]
    partial class _101_milestones
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("StatusSequence");

            modelBuilder.Entity("WebApp.Domain.Entities.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<Instant?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("Title")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("title");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_time")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_chats");

                    b.HasIndex("DeletedTime")
                        .HasDatabaseName("ix_chats_deleted_time");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_chats_owner_id");

                    b.ToTable("chats", null, t =>
                        {
                            t.HasCheckConstraint("CHK_valid_title", "(\"type\" = 1 AND \"title\" IS NULL) OR (\"type\" != 1 AND \"title\" IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("WebApp.Domain.Entities.ChatMember", b =>
                {
                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid")
                        .HasColumnName("chat_id");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid")
                        .HasColumnName("member_id");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("LastReadMessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("last_read_message_id");

                    b.HasKey("ChatId", "MemberId")
                        .HasName("pk_chat_members");

                    b.HasIndex("LastReadMessageId")
                        .HasDatabaseName("ix_chat_members_last_read_message_id");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("ix_chat_members_member_id");

                    b.ToTable("chat_members", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.ChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid")
                        .HasColumnName("chat_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.HasKey("Id")
                        .HasName("pk_chat_messages");

                    b.HasIndex("ChatId")
                        .HasDatabaseName("ix_chat_messages_chat_id");

                    b.HasIndex("CreatedTime")
                        .HasDatabaseName("ix_chat_messages_created_time");

                    b.HasIndex("SenderId")
                        .HasDatabaseName("ix_chat_messages_sender_id");

                    b.ToTable("chat_messages", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.ChecklistItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("Completed")
                        .HasColumnType("boolean")
                        .HasColumnName("completed");

                    b.Property<string>("Content")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("content");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<byte>("Kind")
                        .HasColumnType("smallint")
                        .HasColumnName("kind");

                    b.Property<Guid>("ParentIssueId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_issue_id");

                    b.Property<Guid?>("SubIssueId")
                        .HasColumnType("uuid")
                        .HasColumnName("sub_issue_id");

                    b.HasKey("Id")
                        .HasName("pk_checklist_items");

                    b.HasIndex("SubIssueId")
                        .HasDatabaseName("ix_checklist_items_sub_issue_id");

                    b.HasIndex("ParentIssueId", "SubIssueId")
                        .IsUnique()
                        .HasDatabaseName("ix_checklist_items_parent_issue_id_sub_issue_id");

                    b.ToTable("checklist_items", null, t =>
                        {
                            t.HasCheckConstraint("CHK_valid_sub_issue", "(\"kind\" = 2 AND \"sub_issue_id\" IS NOT NULL) OR (\"kind\" != 2 AND \"sub_issue_id\" IS NULL)");

                            t.HasCheckConstraint("CHK_valid_todo", "(\"kind\" = 1 AND \"content\" IS NOT NULL AND \"completed\" IS NOT NULL AND \"sub_issue_id\" IS NULL) OR (\"kind\" != 1 AND \"content\" IS NULL AND \"completed\" IS NULL)");
                        });
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Issue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<Instant?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Instant?>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<long?>("MilestoneId")
                        .HasColumnType("bigint")
                        .HasColumnName("milestone_id");

                    b.Property<long>("OrderNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("order_number");

                    b.Property<string>("PreviewDescription")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("preview_description");

                    b.Property<byte>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("priority");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<Instant?>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.Property<string>("StatusRank")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status_rank")
                        .UseCollation("C");

                    b.Property<string>("TimelineZone")
                        .HasColumnType("text")
                        .HasColumnName("timeline_zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("title");

                    b.Property<string>("Trigrams")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("trigrams")
                        .HasComputedColumnSql("repeat(\"order_number\"::text || ' ', 4) || \"title\" || ' '", true);

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_time")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_issues");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_issues_author_id");

                    b.HasIndex("DeletedTime")
                        .HasDatabaseName("ix_issues_deleted_time");

                    b.HasIndex("MilestoneId")
                        .HasDatabaseName("ix_issues_milestone_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_issues_status_id");

                    b.HasIndex("StatusRank")
                        .HasDatabaseName("ix_issues_status_rank");

                    b.HasIndex("Trigrams")
                        .HasDatabaseName("ix_issues_trigrams");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Trigrams"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Trigrams"), new[] { "gin_trgm_ops" });

                    b.HasIndex("ProjectId", "OrderNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_issues_project_id_order_number");

                    b.ToTable("issues", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.IssueAssignee", b =>
                {
                    b.Property<Guid>("IssueId")
                        .HasColumnType("uuid")
                        .HasColumnName("issue_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.HasKey("IssueId", "UserId")
                        .HasName("pk_issue_assignees");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_issue_assignees_user_id");

                    b.ToTable("issue_assignees", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.IssueAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("Action")
                        .HasColumnType("smallint")
                        .HasColumnName("action");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<JsonDocument>("Data")
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uuid")
                        .HasColumnName("issue_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_issue_audits");

                    b.HasIndex("IssueId")
                        .HasDatabaseName("ix_issue_audits_issue_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_issue_audits_user_id");

                    b.ToTable("issue_audits", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.IssueComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uuid")
                        .HasColumnName("issue_id");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_time")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_issue_comments");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_issue_comments_author_id");

                    b.HasIndex("IssueId")
                        .HasDatabaseName("ix_issue_comments_issue_id");

                    b.ToTable("issue_comments", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.IssueField", b =>
                {
                    b.Property<Guid>("IssueId")
                        .HasColumnType("uuid")
                        .HasColumnName("issue_id");

                    b.Property<string>("Name")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.Property<byte>("discriminator")
                        .HasColumnType("smallint")
                        .HasColumnName("discriminator");

                    b.HasKey("IssueId", "Name")
                        .HasName("pk_issue_fields");

                    b.ToTable("issue_fields", (string)null);

                    b.HasDiscriminator<byte>("discriminator");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WebApp.Domain.Entities.JobRecord", b =>
                {
                    b.Property<Guid>("TrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("tracking_id");

                    b.Property<string>("CommandJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("command_json");

                    b.Property<DateTime>("ExecuteAfter")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("execute_after");

                    b.Property<DateTime>("ExpireOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expire_on");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_complete");

                    b.Property<string>("QueueID")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("queue_id");

                    b.Property<string>("ResultJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("result_json");

                    b.HasKey("TrackingID")
                        .HasName("pk_job_records");

                    b.ToTable("job_records", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Milestone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Instant>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<string>("PreviewDescription")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("preview_description");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("title");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_time")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_milestones");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_milestones_project_id");

                    b.ToTable("milestones", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<JsonDocument>("Data")
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_notifications");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_notifications_type");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<Instant?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("identifier")
                        .UseCollation("case_insensitive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_time")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("DeletedTime")
                        .HasDatabaseName("ix_projects_deleted_time");

                    b.HasIndex("WorkspaceId", "Identifier")
                        .IsUnique()
                        .HasDatabaseName("ix_projects_workspace_id_identifier");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.ProjectMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_project_members");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_project_members_project_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_project_members_role_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_project_members_user_id");

                    b.HasIndex("ProjectId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_project_members_project_id_user_id");

                    b.ToTable("project_members", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.ProjectMemberInvitation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_project_member_invitations");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_project_member_invitations_project_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_project_member_invitations_role_id");

                    b.HasIndex("UserId", "ProjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_project_member_invitations_user_id_project_id");

                    b.ToTable("project_member_invitations", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.ProjectResource", b =>
                {
                    b.Property<long>("ResourceId")
                        .HasColumnType("bigint")
                        .HasColumnName("resource_id");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("ResourceId")
                        .HasName("pk_project_resources");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_project_resources_project_id");

                    b.ToTable("project_resources", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.ProjectTeam", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.HasKey("ProjectId", "TeamId")
                        .HasName("pk_project_teams");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_project_teams_team_id");

                    b.ToTable("project_teams", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Resource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rank")
                        .UseCollation("C");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_time")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_resources");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_resources_creator_id");

                    b.ToTable("resources", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.ResourceDocument", b =>
                {
                    b.Property<long>("ResourceId")
                        .HasColumnType("bigint")
                        .HasColumnName("resource_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("PreviewContent")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("preview_content");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_time")
                        .HasDefaultValueSql("now()");

                    b.HasKey("ResourceId")
                        .HasName("pk_resource_documents");

                    b.ToTable("resource_documents", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.ResourceFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("mime_type");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("original_name");

                    b.Property<long>("ResourceId")
                        .HasColumnType("bigint")
                        .HasColumnName("resource_id");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_time")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_resource_files");

                    b.HasIndex("ResourceId")
                        .HasDatabaseName("ix_resource_files_resource_id");

                    b.ToTable("resource_files", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.Property<int>("Rank")
                        .HasColumnType("integer")
                        .HasColumnName("rank");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<string>("Permission")
                        .HasColumnType("text")
                        .HasColumnName("permission");

                    b.HasKey("RoleId", "Permission")
                        .HasName("pk_role_permissions");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_permissions_role_id");

                    b.ToTable("role_permissions", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.SharedCounter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Count")
                        .HasColumnType("bigint")
                        .HasColumnName("count");

                    b.HasKey("Id")
                        .HasName("pk_shared_counters");

                    b.ToTable("shared_counters", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"StatusSequence\"')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<long>("Id"));

                    b.Property<byte>("Category")
                        .HasColumnType("smallint")
                        .HasColumnName("category");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("color");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<int>("Rank")
                        .HasColumnType("integer")
                        .HasColumnName("rank");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("WebApp.Domain.Entities.StoragePendingUpload", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<Instant>("ExpiryTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry_time");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("key");

                    b.HasKey("Id")
                        .HasName("pk_storage_pending_uploads");

                    b.HasIndex("ExpiryTime")
                        .HasDatabaseName("ix_storage_pending_uploads_expiry_time");

                    b.ToTable("storage_pending_uploads", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("identifier")
                        .UseCollation("case_insensitive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_time")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.HasKey("Id")
                        .HasName("pk_teams");

                    b.HasIndex("WorkspaceId", "Identifier")
                        .IsUnique()
                        .HasDatabaseName("ix_teams_workspace_id_identifier");

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.TeamInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid")
                        .HasColumnName("member_id");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.HasKey("Id")
                        .HasName("pk_team_invitations");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("ix_team_invitations_member_id");

                    b.HasIndex("TeamId", "MemberId")
                        .IsUnique()
                        .HasDatabaseName("ix_team_invitations_team_id_member_id");

                    b.ToTable("team_invitations", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.TeamIssue", b =>
                {
                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uuid")
                        .HasColumnName("issue_id");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rank")
                        .UseCollation("C");

                    b.HasKey("TeamId", "IssueId")
                        .HasName("pk_team_issues");

                    b.HasIndex("IssueId")
                        .HasDatabaseName("ix_team_issues_issue_id");

                    b.ToTable("team_issues", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.TeamMember", b =>
                {
                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid")
                        .HasColumnName("member_id");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_time")
                        .HasDefaultValueSql("now()");

                    b.HasKey("TeamId", "MemberId")
                        .HasName("pk_team_members");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("ix_team_members_member_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_team_members_role_id");

                    b.ToTable("team_members", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.TeamRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_team_roles");

                    b.ToTable("team_roles", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.TeamRolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("role_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<string>("Permission")
                        .HasColumnType("text")
                        .HasColumnName("permission");

                    b.HasKey("RoleId", "Permission")
                        .HasName("pk_team_role_permissions");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_team_role_permissions_role_id");

                    b.ToTable("team_role_permissions", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("email");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_verified");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("bytea")
                        .HasColumnName("salt");

                    b.Property<string>("Trigrams")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("trigrams")
                        .HasComputedColumnSql("\"email\"", true);

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_time")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("Trigrams")
                        .HasDatabaseName("ix_users_trigrams");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Trigrams"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Trigrams"), new[] { "gin_trgm_ops" });

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserFriend", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("FriendId")
                        .HasColumnType("uuid")
                        .HasColumnName("friend_id");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.HasKey("UserId", "FriendId")
                        .HasName("pk_user_friends");

                    b.HasIndex("FriendId")
                        .HasDatabaseName("ix_user_friends_friend_id");

                    b.ToTable("user_friends", null, t =>
                        {
                            t.HasCheckConstraint("CHK_user_friends_user_id_friend_id", "user_id < friend_id");
                        });
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserFriendRequest", b =>
                {
                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid")
                        .HasColumnName("receiver_id");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.HasKey("SenderId", "ReceiverId")
                        .HasName("pk_user_friend_requests");

                    b.HasIndex("ReceiverId")
                        .HasDatabaseName("ix_user_friend_requests_receiver_id");

                    b.ToTable("user_friend_requests", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserGoogleAuth", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("email");

                    b.Property<string>("GoogleId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("google_id");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_time")
                        .HasDefaultValueSql("now()");

                    b.HasKey("UserId")
                        .HasName("pk_user_google_auth");

                    b.ToTable("user_google_auth", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("NotificationId")
                        .HasColumnType("bigint")
                        .HasColumnName("notification_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_notifications");

                    b.HasIndex("NotificationId")
                        .HasDatabaseName("ix_user_notifications_notification_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_notifications_user_id");

                    b.ToTable("user_notifications", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserNotificationReadFlag", b =>
                {
                    b.Property<long>("UserNotificationId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_notification_id");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.HasKey("UserNotificationId")
                        .HasName("pk_user_notification_read_flags");

                    b.ToTable("user_notification_read_flags", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Bio")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("bio");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("display_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<string>("Trigrams")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("trigrams")
                        .HasComputedColumnSql("\"name\" || ' ' || \"display_name\"", true);

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_time")
                        .HasDefaultValueSql("now()");

                    b.ComplexProperty<Dictionary<string, object>>("Image", "WebApp.Domain.Entities.UserProfile.Image#Asset", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Format")
                                .HasMaxLength(16)
                                .HasColumnType("character varying(16)")
                                .HasColumnName("image_format");

                            b1.Property<string>("PublicId")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("image_public_id");

                            b1.Property<string>("ResourceType")
                                .HasMaxLength(16)
                                .HasColumnType("character varying(16)")
                                .HasColumnName("image_resource_type");

                            b1.Property<int?>("Version")
                                .HasColumnType("integer")
                                .HasColumnName("image_version");
                        });

                    b.HasKey("UserId")
                        .HasName("pk_user_profiles");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_user_profiles_name");

                    b.HasIndex("Trigrams")
                        .HasDatabaseName("ix_user_profiles_trigrams");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Trigrams"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Trigrams"), new[] { "gin_trgm_ops" });

                    b.ToTable("user_profiles", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("token");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_time")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Token")
                        .HasName("pk_user_refresh_tokens");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_refresh_tokens_user_id");

                    b.ToTable("user_refresh_tokens", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserSession", b =>
                {
                    b.Property<string>("SessionId")
                        .HasMaxLength(22)
                        .HasColumnType("character varying(22)")
                        .HasColumnName("session_id");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("SessionId")
                        .HasName("pk_user_sessions");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_sessions_user_id");

                    b.ToTable("user_sessions", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserSocialLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("url");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_social_links");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_social_links_user_id");

                    b.ToTable("user_social_links", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserVerificationToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("token");

                    b.HasKey("UserId", "Token")
                        .HasName("pk_user_verification_tokens");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_verification_tokens_user_id");

                    b.ToTable("user_verification_tokens", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Workspace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<Instant?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("path")
                        .UseCollation("case_insensitive");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_time")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_workspaces");

                    b.HasIndex("DeletedTime")
                        .HasDatabaseName("ix_workspaces_deleted_time");

                    b.HasIndex("Path")
                        .IsUnique()
                        .HasDatabaseName("ix_workspaces_path");

                    b.ToTable("workspaces", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.WorkspaceFieldDefinition", b =>
                {
                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("description");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("type");

                    b.HasKey("WorkspaceId", "Name")
                        .HasName("pk_workspace_field_definitions");

                    b.ToTable("workspace_field_definitions", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.WorkspaceInvitation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.HasKey("Id")
                        .HasName("pk_workspace_invitations");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_workspace_invitations_user_id");

                    b.HasIndex("WorkspaceId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_workspace_invitations_workspace_id_user_id");

                    b.ToTable("workspace_invitations", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.WorkspaceMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_time")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.HasKey("Id")
                        .HasName("pk_workspace_members");

                    b.HasIndex("CreatedTime")
                        .HasDatabaseName("ix_workspace_members_created_time");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_workspace_members_role_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_workspace_members_user_id");

                    b.HasIndex("WorkspaceId")
                        .HasDatabaseName("ix_workspace_members_workspace_id");

                    b.ToTable("workspace_members", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.WorkspaceResource", b =>
                {
                    b.Property<long>("ResourceId")
                        .HasColumnType("bigint")
                        .HasColumnName("resource_id");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.HasKey("ResourceId")
                        .HasName("pk_workspace_resources");

                    b.HasIndex("WorkspaceId")
                        .HasDatabaseName("ix_workspace_resources_workspace_id");

                    b.ToTable("workspace_resources", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.IssueFieldBoolean", b =>
                {
                    b.HasBaseType("WebApp.Domain.Entities.IssueField");

                    b.Property<bool>("Value")
                        .HasColumnType("boolean")
                        .HasColumnName("value");

                    b.ToTable("issue_fields", (string)null);

                    b.HasDiscriminator().HasValue((byte)2);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.IssueFieldNumber", b =>
                {
                    b.HasBaseType("WebApp.Domain.Entities.IssueField");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("value");

                    b.ToTable("issue_fields", null, t =>
                        {
                            t.Property("Value")
                                .HasColumnName("issue_field_number_value");
                        });

                    b.HasDiscriminator().HasValue((byte)1);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.IssueFieldText", b =>
                {
                    b.HasBaseType("WebApp.Domain.Entities.IssueField");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.ToTable("issue_fields", null, t =>
                        {
                            t.Property("Value")
                                .HasColumnName("issue_field_text_value");
                        });

                    b.HasDiscriminator().HasValue((byte)0);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.WorkspaceStatus", b =>
                {
                    b.HasBaseType("WebApp.Domain.Entities.Status");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.HasIndex("WorkspaceId")
                        .HasDatabaseName("ix_workspace_statuses_workspace_id");

                    b.ToTable("workspace_statuses", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Chat", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.User", "Owner")
                        .WithMany("OwnedChats")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chats_users_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.ChatMember", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Chat", "Chat")
                        .WithMany("ChatMembers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chat_members_chats_chat_id");

                    b.HasOne("WebApp.Domain.Entities.ChatMessage", "LastReadMessage")
                        .WithMany()
                        .HasForeignKey("LastReadMessageId")
                        .HasConstraintName("fk_chat_members_chat_messages_last_read_message_id");

                    b.HasOne("WebApp.Domain.Entities.User", "Member")
                        .WithMany("ChatMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chat_members_users_member_id");

                    b.Navigation("Chat");

                    b.Navigation("LastReadMessage");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.ChatMessage", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Chat", "Chat")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chat_messages_chats_chat_id");

                    b.HasOne("WebApp.Domain.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chat_messages_users_sender_id");

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.ChecklistItem", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Issue", "ParentIssue")
                        .WithMany("SubChecklistItems")
                        .HasForeignKey("ParentIssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_checklist_items_issues_parent_issue_id");

                    b.HasOne("WebApp.Domain.Entities.Issue", "SubIssue")
                        .WithMany("ParentChecklistItems")
                        .HasForeignKey("SubIssueId")
                        .HasConstraintName("fk_checklist_items_issues_sub_issue_id");

                    b.Navigation("ParentIssue");

                    b.Navigation("SubIssue");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Issue", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_issues_users_author_id");

                    b.HasOne("WebApp.Domain.Entities.Milestone", "Milestone")
                        .WithMany("Issues")
                        .HasForeignKey("MilestoneId")
                        .HasConstraintName("fk_issues_milestones_milestone_id");

                    b.HasOne("WebApp.Domain.Entities.Project", "Project")
                        .WithMany("Issues")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_issues_projects_project_id");

                    b.HasOne("WebApp.Domain.Entities.WorkspaceStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_issues_workspace_statuses_status_id");

                    b.Navigation("Author");

                    b.Navigation("Milestone");

                    b.Navigation("Project");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.IssueAssignee", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Issue", "Issue")
                        .WithMany("IssueAssignees")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_issue_assignees_issues_issue_id");

                    b.HasOne("WebApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_issue_assignees_users_user_id");

                    b.Navigation("Issue");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.IssueAudit", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Issue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_issue_audits_issues_issue_id");

                    b.HasOne("WebApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_issue_audits_users_user_id");

                    b.Navigation("Issue");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.IssueComment", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_issue_comments_users_author_id");

                    b.HasOne("WebApp.Domain.Entities.Issue", "Issue")
                        .WithMany("Comments")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_issue_comments_issues_issue_id");

                    b.Navigation("Author");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.IssueField", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Issue", "Issue")
                        .WithMany("Fields")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_issue_fields_issues_issue_id");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Milestone", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Project", "Project")
                        .WithMany("Milestones")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_milestones_projects_project_id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Project", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Workspace", "Workspace")
                        .WithMany("Projects")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_projects_workspaces_workspace_id");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.ProjectMember", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Project", "Project")
                        .WithMany("Members")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_members_projects_project_id");

                    b.HasOne("WebApp.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_members_roles_role_id");

                    b.HasOne("WebApp.Domain.Entities.User", "User")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_members_users_user_id");

                    b.Navigation("Project");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.ProjectMemberInvitation", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_member_invitations_projects_project_id");

                    b.HasOne("WebApp.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_member_invitations_roles_role_id");

                    b.HasOne("WebApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_member_invitations_users_user_id");

                    b.Navigation("Project");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.ProjectResource", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_resources_projects_project_id");

                    b.HasOne("WebApp.Domain.Entities.Resource", "Resource")
                        .WithOne("ProjectResource")
                        .HasForeignKey("WebApp.Domain.Entities.ProjectResource", "ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_resources_resources_resource_id");

                    b.Navigation("Project");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.ProjectTeam", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_teams_projects_project_id");

                    b.HasOne("WebApp.Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_teams_teams_team_id");

                    b.Navigation("Project");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Resource", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_resources_users_creator_id");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.ResourceDocument", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Resource", "Resource")
                        .WithOne("Document")
                        .HasForeignKey("WebApp.Domain.Entities.ResourceDocument", "ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_resource_documents_resources_resource_id");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.ResourceFile", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Resource", "Resource")
                        .WithMany("Files")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_resource_files_resources_resource_id");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Role", null)
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_roles_role_id");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Team", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teams_workspaces_workspace_id");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.TeamInvitation", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.User", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_invitations_users_member_id");

                    b.HasOne("WebApp.Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_invitations_teams_team_id");

                    b.HasOne("WebApp.Domain.Entities.TeamMember", null)
                        .WithOne("PendingInvitation")
                        .HasForeignKey("WebApp.Domain.Entities.TeamInvitation", "TeamId", "MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_invitations_team_members_team_id_member_id");

                    b.Navigation("Member");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.TeamIssue", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Issue", "Issue")
                        .WithMany("TeamIssues")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_issues_issues_issue_id");

                    b.HasOne("WebApp.Domain.Entities.Team", "Team")
                        .WithMany("TeamIssues")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_issues_teams_team_id");

                    b.Navigation("Issue");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.TeamMember", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.User", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_members_users_member_id");

                    b.HasOne("WebApp.Domain.Entities.TeamRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_members_team_roles_role_id");

                    b.HasOne("WebApp.Domain.Entities.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_members_teams_team_id");

                    b.Navigation("Member");

                    b.Navigation("Role");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.TeamRolePermission", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.TeamRole", null)
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_role_permissions_team_roles_role_id");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserFriend", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.User", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_friends_users_friend_id");

                    b.HasOne("WebApp.Domain.Entities.User", "User")
                        .WithMany("UserFriends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_friends_users_user_id");

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserFriendRequest", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.User", "Receiver")
                        .WithMany("UserReceivedFriendRequests")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_friend_requests_users_receiver_id");

                    b.HasOne("WebApp.Domain.Entities.User", "Sender")
                        .WithMany("UserSentFriendRequests")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_friend_requests_users_sender_id");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserGoogleAuth", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.User", "User")
                        .WithOne("GoogleAuth")
                        .HasForeignKey("WebApp.Domain.Entities.UserGoogleAuth", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_google_auth_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserNotification", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_notifications_notifications_notification_id");

                    b.HasOne("WebApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_notifications_users_user_id");

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserNotificationReadFlag", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.UserNotification", "UserNotification")
                        .WithOne("ReadFlag")
                        .HasForeignKey("WebApp.Domain.Entities.UserNotificationReadFlag", "UserNotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_notification_read_flags_user_notifications_user_notifi");

                    b.Navigation("UserNotification");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserProfile", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("WebApp.Domain.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_profiles_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserRefreshToken", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_refresh_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserSession", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_sessions_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserSocialLink", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.UserProfile", "Profile")
                        .WithMany("SocialLinks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_social_links_user_profiles_user_id");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserVerificationToken", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("WebApp.Domain.Entities.UserVerificationToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_verification_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.WorkspaceFieldDefinition", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Workspace", "Workspace")
                        .WithMany("FieldDefinitions")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workspace_field_definitions_workspaces_workspace_id");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.WorkspaceInvitation", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workspace_invitations_users_user_id");

                    b.HasOne("WebApp.Domain.Entities.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workspace_invitations_workspaces_workspace_id");

                    b.Navigation("User");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.WorkspaceMember", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workspace_members_roles_role_id");

                    b.HasOne("WebApp.Domain.Entities.User", "User")
                        .WithMany("WorkspaceMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workspace_members_users_user_id");

                    b.HasOne("WebApp.Domain.Entities.Workspace", "Workspace")
                        .WithMany("Members")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workspace_members_workspaces_workspace_id");

                    b.Navigation("Role");

                    b.Navigation("User");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.WorkspaceResource", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Resource", "Resource")
                        .WithOne("WorkspaceResource")
                        .HasForeignKey("WebApp.Domain.Entities.WorkspaceResource", "ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workspace_resources_resources_resource_id");

                    b.HasOne("WebApp.Domain.Entities.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workspace_resources_workspaces_workspace_id");

                    b.Navigation("Resource");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.WorkspaceStatus", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Workspace", "Workspace")
                        .WithMany("Statuses")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workspace_statuses_workspaces_workspace_id");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Chat", b =>
                {
                    b.Navigation("ChatMembers");

                    b.Navigation("ChatMessages");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Issue", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Fields");

                    b.Navigation("IssueAssignees");

                    b.Navigation("ParentChecklistItems");

                    b.Navigation("SubChecklistItems");

                    b.Navigation("TeamIssues");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Milestone", b =>
                {
                    b.Navigation("Issues");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Project", b =>
                {
                    b.Navigation("Issues");

                    b.Navigation("Members");

                    b.Navigation("Milestones");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Resource", b =>
                {
                    b.Navigation("Document");

                    b.Navigation("Files");

                    b.Navigation("ProjectResource");

                    b.Navigation("WorkspaceResource");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Role", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Team", b =>
                {
                    b.Navigation("TeamIssues");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.TeamMember", b =>
                {
                    b.Navigation("PendingInvitation");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.TeamRole", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.User", b =>
                {
                    b.Navigation("ChatMembers");

                    b.Navigation("GoogleAuth");

                    b.Navigation("OwnedChats");

                    b.Navigation("Profile");

                    b.Navigation("ProjectMembers");

                    b.Navigation("UserFriends");

                    b.Navigation("UserReceivedFriendRequests");

                    b.Navigation("UserSentFriendRequests");

                    b.Navigation("WorkspaceMembers");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserNotification", b =>
                {
                    b.Navigation("ReadFlag");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserProfile", b =>
                {
                    b.Navigation("SocialLinks");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Workspace", b =>
                {
                    b.Navigation("FieldDefinitions");

                    b.Navigation("Members");

                    b.Navigation("Projects");

                    b.Navigation("Statuses");
                });
#pragma warning restore 612, 618
        }
    }
}
